{"version":3,"file":"static/js/234.28d1e305.chunk.js","mappings":"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","sources":["components/SearchBar.tsx","components/MovieCard.tsx","components/SkeletonLoader.tsx","components/MovieGrid.tsx","components/Pagination.tsx","hooks/useMovieSearch.ts","pages/Home.tsx","services/api.ts","components/ErrorMessage.tsx"],"sourcesContent":["import React, { useState, ChangeEvent, FormEvent } from 'react';\r\nimport { TextField, IconButton, InputAdornment } from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\n\r\ninterface SearchBarProps {\r\n  onSearch: (query: string) => void;\r\n  initialValue?: string;\r\n}\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = ({ onSearch, initialValue = '' }) => {\r\n  const [query, setQuery] = useState(initialValue);\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n    setQuery(value);\r\n    onSearch(value);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setQuery('');\r\n    onSearch('');\r\n  };\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    onSearch(query);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={{ width: '100%', maxWidth: '600px', margin: '0 auto' }}>\r\n      <TextField\r\n        fullWidth\r\n        variant=\"outlined\"\r\n        placeholder=\"Search for movies...\"\r\n        value={query}\r\n        onChange={handleChange}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n          endAdornment: query && (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton onClick={handleClear} edge=\"end\">\r\n                <ClearIcon />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        sx={{\r\n          '& .MuiOutlinedInput-root': {\r\n            backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n            color: 'white',\r\n            '& fieldset': {\r\n              borderColor: 'rgba(255, 255, 255, 0.3)',\r\n            },\r\n            '&:hover fieldset': {\r\n              borderColor: 'rgba(255, 255, 255, 0.5)',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n              borderColor: 'primary.main',\r\n            },\r\n          },\r\n          '& .MuiInputBase-input': {\r\n            color: 'white',\r\n          },\r\n          '& .MuiInputAdornment-root .MuiSvgIcon-root': {\r\n            color: 'rgba(255, 255, 255, 0.7)',\r\n          },\r\n        }}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchBar; ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardContent, CardMedia, Typography, Box } from '@mui/material';\r\nimport { Movie } from '../types/Movie';\r\n\r\ninterface MovieCardProps {\r\n  movie: Movie;\r\n}\r\n\r\nconst MovieCard: React.FC<MovieCardProps> = ({ movie }) => {\r\n  return (\r\n    <Link to={`/movie/${movie.imdbID}`} style={{ textDecoration: 'none' }}>\r\n      <Card\r\n        sx={{\r\n          height: '100%',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.05)',\r\n          transition: 'transform 0.2s, box-shadow 0.2s',\r\n          '&:hover': {\r\n            transform: 'translateY(-4px)',\r\n            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)',\r\n          },\r\n        }}\r\n      >\r\n        <CardMedia\r\n          component=\"img\"\r\n          height=\"300\"\r\n          image={movie.Poster !== 'N/A' ? movie.Poster : '/movie-placeholder.svg'}\r\n          alt={movie.Title}\r\n          sx={{\r\n            objectFit: 'cover',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.1)',\r\n          }}\r\n        />\r\n        <CardContent sx={{ flexGrow: 1, color: 'white' }}>\r\n          <Typography\r\n            gutterBottom\r\n            variant=\"h6\"\r\n            component=\"div\"\r\n            sx={{\r\n              fontWeight: 'bold',\r\n              overflow: 'hidden',\r\n              textOverflow: 'ellipsis',\r\n              display: '-webkit-box',\r\n              WebkitLineClamp: 2,\r\n              WebkitBoxOrient: 'vertical',\r\n            }}\r\n          >\r\n            {movie.Title}\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\r\n              {movie.Year}\r\n            </Typography>\r\n            <Typography\r\n              variant=\"body2\"\r\n              sx={{\r\n                backgroundColor: 'primary.main',\r\n                color: 'white',\r\n                padding: '2px 8px',\r\n                borderRadius: '4px',\r\n                textTransform: 'capitalize',\r\n              }}\r\n            >\r\n              {movie.Type}\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default MovieCard; ","import React from 'react';\r\nimport { Card, CardContent, CardMedia, Skeleton, Box } from '@mui/material';\r\n\r\nconst SkeletonLoader: React.FC = () => {\r\n  return (\r\n    <Card\r\n      sx={{\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: 'rgba(255, 255, 255, 0.05)',\r\n      }}\r\n    >\r\n      <Skeleton\r\n        variant=\"rectangular\"\r\n        height={300}\r\n        sx={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n        }}\r\n      />\r\n      <CardContent sx={{ flexGrow: 1 }}>\r\n        <Skeleton\r\n          variant=\"text\"\r\n          height={32}\r\n          sx={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n            marginBottom: 1,\r\n          }}\r\n        />\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Skeleton\r\n            variant=\"text\"\r\n            width={60}\r\n            sx={{\r\n              backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n            }}\r\n          />\r\n          <Skeleton\r\n            variant=\"text\"\r\n            width={80}\r\n            sx={{\r\n              backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n            }}\r\n          />\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SkeletonLoader; ","import React from 'react';\r\nimport { Grid, Typography, Box } from '@mui/material';\r\nimport { Movie } from '../types/Movie';\r\nimport MovieCard from './MovieCard';\r\nimport SkeletonLoader from './SkeletonLoader';\r\n\r\ninterface MovieGridProps {\r\n  movies: Movie[];\r\n  loading?: boolean;\r\n}\r\n\r\nconst MovieGrid: React.FC<MovieGridProps> = ({ movies, loading = false }) => {\r\n  if (loading) {\r\n    return (\r\n      <Grid container spacing={3}>\r\n        {[...Array(8)].map((_, index) => (\r\n          <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\r\n            <SkeletonLoader />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  if (movies.length === 0) {\r\n    return (\r\n      <Box sx={{ textAlign: 'center', py: 4 }}>\r\n        <Typography variant=\"h6\" color=\"text.secondary\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\r\n          No movies found\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      {movies.map((movie) => (\r\n        <Grid item xs={12} sm={6} md={4} lg={3} key={movie.imdbID}>\r\n          <MovieCard movie={movie} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MovieGrid; ","import React from 'react';\r\nimport { Box, Button } from '@mui/material';\r\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\n\r\ninterface PaginationProps {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  onPageChange: (page: number) => void;\r\n}\r\n\r\nconst Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {\r\n  const pages = Array.from({ length: totalPages }, (_, i) => i + 1);\r\n  const maxVisiblePages = 5;\r\n\r\n  const getVisiblePages = () => {\r\n    if (totalPages <= maxVisiblePages) {\r\n      return pages;\r\n    }\r\n\r\n    const halfVisible = Math.floor(maxVisiblePages / 2);\r\n    let start = Math.max(currentPage - halfVisible, 1);\r\n    let end = Math.min(start + maxVisiblePages - 1, totalPages);\r\n\r\n    if (end - start + 1 < maxVisiblePages) {\r\n      start = Math.max(end - maxVisiblePages + 1, 1);\r\n    }\r\n\r\n    return pages.slice(start - 1, end);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        gap: 1,\r\n        marginTop: 4,\r\n      }}\r\n    >\r\n      <Button\r\n        variant=\"outlined\"\r\n        startIcon={<NavigateBeforeIcon />}\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n        sx={{\r\n          color: 'white',\r\n          borderColor: 'rgba(255, 255, 255, 0.3)',\r\n          '&:hover': {\r\n            borderColor: 'white',\r\n          },\r\n        }}\r\n      >\r\n        Previous\r\n      </Button>\r\n\r\n      {getVisiblePages().map((page) => (\r\n        <Button\r\n          key={page}\r\n          variant={currentPage === page ? 'contained' : 'outlined'}\r\n          onClick={() => onPageChange(page)}\r\n          sx={{\r\n            minWidth: '40px',\r\n            color: currentPage === page ? 'white' : 'rgba(255, 255, 255, 0.7)',\r\n            borderColor: 'rgba(255, 255, 255, 0.3)',\r\n            '&:hover': {\r\n              borderColor: 'white',\r\n            },\r\n          }}\r\n        >\r\n          {page}\r\n        </Button>\r\n      ))}\r\n\r\n      <Button\r\n        variant=\"outlined\"\r\n        endIcon={<NavigateNextIcon />}\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === totalPages}\r\n        sx={{\r\n          color: 'white',\r\n          borderColor: 'rgba(255, 255, 255, 0.3)',\r\n          '&:hover': {\r\n            borderColor: 'white',\r\n          },\r\n        }}\r\n      >\r\n        Next\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Pagination; ","import { useState, useEffect, useCallback } from 'react';\r\nimport { debounce } from 'lodash';\r\nimport { Movie } from '../types/Movie';\r\nimport { searchMovies } from '../services/api';\r\n\r\ninterface UseMovieSearchReturn {\r\n  movies: Movie[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  totalResults: number;\r\n  currentPage: number;\r\n  search: (query: string) => void;\r\n  changePage: (page: number) => void;\r\n}\r\n\r\nexport const useMovieSearch = (): UseMovieSearchReturn => {\r\n  const [movies, setMovies] = useState<Movie[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [totalResults, setTotalResults] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const handleSearch = useCallback(async (query: string, page: number = 1) => {\r\n    if (!query.trim()) {\r\n      setMovies([]);\r\n      setTotalResults(0);\r\n      setError(null);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await searchMovies(query, page);\r\n      \r\n      if (response.Response === 'True') {\r\n        setMovies(response.Search);\r\n        setTotalResults(parseInt(response.totalResults));\r\n        setError(null);\r\n      } else {\r\n        setMovies([]);\r\n        setTotalResults(0);\r\n        setError(response.Error || 'No movies found');\r\n      }\r\n    } catch (err) {\r\n      setMovies([]);\r\n      setTotalResults(0);\r\n      setError('An error occurred while searching for movies');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const debouncedSearch = useCallback(\r\n    debounce((query: string) => {\r\n      setCurrentPage(1);\r\n      handleSearch(query, 1);\r\n    }, 500),\r\n    [handleSearch]\r\n  );\r\n\r\n  const search = useCallback((query: string) => {\r\n    setSearchQuery(query);\r\n    debouncedSearch(query);\r\n  }, [debouncedSearch]);\r\n\r\n  const changePage = useCallback((page: number) => {\r\n    setCurrentPage(page);\r\n    handleSearch(searchQuery, page);\r\n  }, [searchQuery, handleSearch]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      debouncedSearch.cancel();\r\n    };\r\n  }, [debouncedSearch]);\r\n\r\n  return {\r\n    movies,\r\n    loading,\r\n    error,\r\n    totalResults,\r\n    currentPage,\r\n    search,\r\n    changePage,\r\n  };\r\n}; ","import React, { useEffect } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { Container, Typography, Box } from '@mui/material';\r\nimport SearchBar from '../components/SearchBar';\r\nimport MovieGrid from '../components/MovieGrid';\r\nimport Pagination from '../components/Pagination';\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport { useMovieSearch } from '../hooks/useMovieSearch';\r\n\r\nconst Home: React.FC = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const { movies, loading, error, totalResults, currentPage, search, changePage } = useMovieSearch();\r\n\r\n  const query = searchParams.get('q') || '';\r\n  const page = parseInt(searchParams.get('page') || '1');\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      search(query);\r\n    }\r\n  }, [query, search]);\r\n\r\n  const handleSearch = (newQuery: string) => {\r\n    setSearchParams({ q: newQuery, page: '1' });\r\n  };\r\n\r\n  const handlePageChange = (newPage: number) => {\r\n    setSearchParams({ q: query, page: newPage.toString() });\r\n    changePage(newPage);\r\n  };\r\n\r\n  const totalPages = Math.ceil(totalResults / 10);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: '100vh',\r\n        backgroundColor: '#141414',\r\n        color: 'white',\r\n        paddingBottom: 4,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          background: 'linear-gradient(to bottom, #000000, #141414)',\r\n          padding: '40px 20px',\r\n          textAlign: 'center',\r\n          marginBottom: 4,\r\n        }}\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          <Typography\r\n            variant=\"h3\"\r\n            component=\"h1\"\r\n            sx={{\r\n              marginBottom: 3,\r\n              fontWeight: 'bold',\r\n              background: 'linear-gradient(45deg, #FF6B6B, #4ECDC4)',\r\n              WebkitBackgroundClip: 'text',\r\n              WebkitTextFillColor: 'transparent',\r\n            }}\r\n          >\r\n            Movie Search\r\n          </Typography>\r\n          <SearchBar onSearch={handleSearch} initialValue={query} />\r\n        </Container>\r\n      </Box>\r\n\r\n      <Container maxWidth=\"lg\">\r\n        <ErrorMessage message={error || ''} />\r\n        <MovieGrid movies={movies} loading={loading} />\r\n        {totalPages > 0 && (\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            totalPages={totalPages}\r\n            onPageChange={handlePageChange}\r\n          />\r\n        )}\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home; ","import axios from 'axios';\r\nimport { Movie, MovieDetail, SearchResponse } from '../types/Movie';\r\n\r\nconst OMDB_API_KEY = process.env.REACT_APP_OMDB_KEY;\r\nconst OMDB_API_URL = 'https://www.omdbapi.com';\r\n\r\n// Cache for storing search results\r\nconst searchCache = new Map<string, SearchResponse>();\r\nconst detailCache = new Map<string, MovieDetail>();\r\n\r\nexport const searchMovies = async (query: string, page: number = 1): Promise<SearchResponse> => {\r\n  const cacheKey = `${query}-${page}`;\r\n  \r\n  if (searchCache.has(cacheKey)) {\r\n    return searchCache.get(cacheKey)!;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get<SearchResponse>(OMDB_API_URL, {\r\n      params: {\r\n        apikey: OMDB_API_KEY,\r\n        s: query,\r\n        page,\r\n      },\r\n    });\r\n\r\n    if (response.data.Response === 'True') {\r\n      searchCache.set(cacheKey, response.data);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching movies:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getMovieDetails = async (imdbID: string): Promise<MovieDetail> => {\r\n  if (detailCache.has(imdbID)) {\r\n    return detailCache.get(imdbID)!;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get<MovieDetail>(OMDB_API_URL, {\r\n      params: {\r\n        apikey: OMDB_API_KEY,\r\n        i: imdbID,\r\n        plot: 'full',\r\n      },\r\n    });\r\n\r\n    if (response.data.Response === 'True') {\r\n      detailCache.set(imdbID, response.data);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching movie details:', error);\r\n    throw error;\r\n  }\r\n}; ","import React from 'react';\r\nimport { Alert, AlertTitle } from '@mui/material';\r\n\r\ninterface ErrorMessageProps {\r\n  message: string;\r\n}\r\n\r\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ message }) => {\r\n  if (!message) return null;\r\n\r\n  return (\r\n    <Alert\r\n      severity=\"error\"\r\n      sx={{\r\n        margin: '20px 0',\r\n        backgroundColor: 'rgba(211, 47, 47, 0.1)',\r\n        color: '#f44336',\r\n        '& .MuiAlert-icon': {\r\n          color: '#f44336',\r\n        },\r\n      }}\r\n    >\r\n      <AlertTitle>Error</AlertTitle>\r\n      {message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage; "],"names":["_ref","onSearch","initialValue","query","setQuery","useState","_jsx","onSubmit","event","preventDefault","style","width","maxWidth","margin","children","TextField","fullWidth","variant","placeholder","value","onChange","target","InputProps","startAdornment","InputAdornment","position","SearchIcon","endAdornment","IconButton","onClick","handleClear","edge","ClearIcon","sx","backgroundColor","color","borderColor","movie","Link","to","imdbID","textDecoration","_jsxs","Card","height","display","flexDirection","transition","transform","boxShadow","CardMedia","component","image","Poster","alt","Title","objectFit","CardContent","flexGrow","Typography","gutterBottom","fontWeight","overflow","textOverflow","WebkitLineClamp","WebkitBoxOrient","Box","justifyContent","alignItems","Year","padding","borderRadius","textTransform","Type","SkeletonLoader","Skeleton","marginBottom","movies","loading","Grid","container","spacing","Array","map","_","index","item","xs","sm","md","lg","length","textAlign","py","MovieCard","currentPage","totalPages","onPageChange","pages","from","i","gap","marginTop","Button","startIcon","NavigateBeforeIcon","disabled","getVisiblePages","halfVisible","Math","floor","maxVisiblePages","start","max","end","min","slice","page","minWidth","endIcon","NavigateNextIcon","Home","searchParams","setSearchParams","useSearchParams","error","totalResults","search","changePage","useMovieSearch","setMovies","setLoading","setError","setTotalResults","setCurrentPage","searchQuery","setSearchQuery","handleSearch","useCallback","async","arguments","undefined","trim","response","searchMovies","Response","Search","parseInt","Error","err","debouncedSearch","debounce","useEffect","cancel","get","ceil","minHeight","paddingBottom","background","Container","WebkitBackgroundClip","WebkitTextFillColor","SearchBar","newQuery","q","ErrorMessage","message","MovieGrid","Pagination","newPage","toString","OMDB_API_KEY","process","OMDB_API_URL","searchCache","Map","detailCache","cacheKey","has","axios","params","apikey","s","data","set","console","getMovieDetails","plot","Alert","severity","AlertTitle"],"sourceRoot":""}